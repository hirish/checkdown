// Generated by CoffeeScript 1.6.3
var AllDebt, AllList, Debt, Debts, MyButtons, MyOwedDebt, MyOwedList, MyOwedUser, MyOwedView, MyPaymentButtons, User, Users, createDebtFromJSON, createUserFromJSON, debts, getDebts, getUsers, users;

User = Backbone.Model.extend({
  defaults: {
    username: 'None',
    email: 'None'
  },
  toString: function() {
    return "[User: " + this.get('username') + "]";
  }
});

Debt = Backbone.Model.extend({
  defaults: {
    debtor: null,
    lender: null,
    description: 'None',
    created: null,
    paid: false
  },
  toString: function() {
    if (this.get('paid')) {
      return "[Debt: " + this.get('debtor') + " owed " + this.get('lender') + " " + this.get('amount') + "]";
    } else {
      return "[Debt: " + this.get('debtor') + " owes " + this.get('lender') + " " + this.get('amount') + "]";
    }
  }
});

Users = Backbone.Collection.extend({
  model: Users
});

Debts = Backbone.Collection.extend({
  model: Debt,
  lenderIs: function(user) {
    return new Debts(this.filter(function(debt) {
      return debt.get('lender').id === user.id;
    }));
  },
  debtorIs: function(user) {
    return new Debts(this.filter(function(debt) {
      return debt.get('debtor').id === user.id;
    }));
  },
  groupByDebtor: function() {
    var debtor, grouped;
    grouped = this.groupBy(function(debt) {
      return debt.get('debtor').get('username');
    });
    for (debtor in grouped) {
      grouped[debtor] = new Debts(grouped[debtor]);
    }
    return grouped;
  },
  groupByLender: function() {
    var grouped, lender;
    grouped = this.groupBy(function(debt) {
      return debt.get('lender').get('username');
    });
    for (lender in grouped) {
      grouped[lender] = new Debts(grouped[lender]);
    }
    return grouped;
  },
  totalAmount: function() {
    return this.reduce((function(x, y) {
      return x + y.get('amount');
    }), 0);
  }
});

getUsers = function() {
  var response, userJSON, users;
  response = $.ajax('/users', {
    async: false
  });
  users = (jQuery.parseJSON(response.responseText)).users;
  return new Users((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = users.length; _i < _len; _i++) {
      userJSON = users[_i];
      _results.push(createUserFromJSON(userJSON));
    }
    return _results;
  })());
};

createUserFromJSON = function(json) {
  return new User({
    id: json.id,
    username: json.username,
    email: json.email
  });
};

users = getUsers();

getDebts = function() {
  var debtJSON, debts, response;
  response = $.ajax('/debts', {
    async: false
  });
  debts = (jQuery.parseJSON(response.responseText)).debts;
  return new Debts((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = debts.length; _i < _len; _i++) {
      debtJSON = debts[_i];
      _results.push(createDebtFromJSON(debtJSON));
    }
    return _results;
  })());
};

createDebtFromJSON = function(json) {
  var debtor, lender;
  debtor = users.get(json.debtor.id);
  lender = users.get(json.lender.id);
  return new Debt({
    id: json.id,
    debtor: debtor,
    lender: lender,
    description: json.description,
    created: json.created,
    paid: json.paid,
    amount: json.amount
  });
};

AllList = React.createClass({
  getInitialState: function() {
    var _this = this;
    this.props.debts.on('change add remove', function(e) {
      return _this.setState({
        debts: _this.props.debts
      });
    });
    return {
      debts: this.props.debts
    };
  },
  render: function() {
    var renderedDebts;
    renderedDebts = this.state.debts.map(function(debt) {
      return AllDebt({
        debt: debt
      });
    });
    return React.DOM.div({
      id: "debtview"
    }, renderedDebts);
  }
});

AllDebt = React.createClass({
  render: function() {
    var amount, debtor, description, lender;
    debtor = this.props.debt.get('debtor').get('username');
    lender = this.props.debt.get('lender').get('username');
    amount = this.props.debt.get('amount');
    description = this.props.debt.get('description');
    return React.DOM.div({
      className: "debt"
    }, React.DOM.div({
      className: "heading"
    }, React.DOM.a({}, debtor), React.DOM.i({
      className: "fa fa-arrow-circle-right"
    }), React.DOM.a({}, lender), React.DOM.span({
      className: "amount"
    }, "$" + amount)), React.DOM.div({
      className: "description"
    }, description));
  }
});

debts = getDebts();

MyOwedList = React.createClass({
  getInitialState: function() {
    var _this = this;
    this.props.debts.on('change add remove', function(e) {
      return _this.setState({
        debts: _this.props.debts
      });
    });
    return {
      user: this.props.user,
      debts: this.props.debts
    };
  },
  render: function() {
    var groupedDebts, groupedDebtsArray, key, renderedUsers;
    groupedDebts = this.state.debts.debtorIs(this.state.user).groupByLender();
    groupedDebtsArray = (function() {
      var _results;
      _results = [];
      for (key in groupedDebts) {
        _results.push([key, groupedDebts[key]]);
      }
      return _results;
    })();
    renderedUsers = groupedDebtsArray.map(function(group) {
      return MyOwedUser({
        lender: group[0],
        debts: group[1]
      });
    });
    return React.DOM.div({}, renderedUsers);
  }
});

MyOwedUser = React.createClass({
  render: function() {
    var renderedDebts, total, username;
    username = this.props.lender;
    total = this.props.debts.totalAmount();
    renderedDebts = this.props.debts.map(function(debt) {
      return MyOwedDebt({
        debt: debt
      });
    });
    return React.DOM.div({
      className: "person-debt"
    }, "You are owed by ", React.DOM.a({
      style: {
        'font-weight': 'bold'
      }
    }, username), " a total of $" + total, React.DOM.ul({
      className: "fa-ul debt-details"
    }, renderedDebts), MyButtons({
      total: total
    }));
  }
});

MyOwedDebt = React.createClass({
  render: function() {
    var amount, date, description;
    date = "08-22-2012";
    description = this.props.debt.get('description');
    amount = this.props.debt.get('amount');
    return React.DOM.li({}, React.DOM.i({
      className: "fa-li fa fa-arrow-circle-right"
    }), React.DOM.span({
      className: 'date'
    }, date + ': '), React.DOM.span({
      className: 'description'
    }, description), React.DOM.span({
      className: 'badge amount positive'
    }, '$' + amount));
  }
});

MyButtons = React.createClass({
  render: function() {
    var buttons, total;
    total = this.props.total;
    buttons = MyPaymentButtons({
      total: total
    });
    return React.DOM.div({
      className: "btn-group",
      style: {
        width: "100%"
      }
    }, buttons);
  }
});

MyPaymentButtons = React.createClass({
  render: function() {
    var total;
    total = this.props.total;
    return React.DOM.div({
      style: {
        margin: "10px 30%"
      }
    }, React.DOM.button({
      className: "btn btn-success btn-xs"
    }, React.DOM.i({
      className: "fa fa-usd"
    }), "Pay $ " + total), " ", React.DOM.button({
      className: "btn btn-primary btn-xs"
    }, React.DOM.i({
      className: "fa fa-usd"
    }), "Pay Other"));
  }
});

MyOwedView = Backbone.View.extend({
  initialize: function(args) {
    this.user = args.user;
    return this.render();
  },
  render: function() {
    var groupedDebts, lenderDebts, template;
    groupedDebts = this.collection.debtorIs(this.user).groupByLender();
    template = '';
    for (lenderDebts in groupedDebts) {
      template += _.template($('#myowed').html(), {});
    }
    return this.$el.html(template);
  }
});

$(function() {
  var owe, owed, user;
  window.debts = debts;
  window.users = users;
  window.user = user = users.models[1];
  React.renderComponent(MyOwedList({
    user: user,
    debts: debts
  }), $('#owe')[0]);
  React.renderComponent(AllList({
    debts: debts
  }), $('#debtviewholder')[0]);
  window.owe = owe = debts.debtorIs(user);
  return window.owed = owed = debts.lenderIs(user);
});
