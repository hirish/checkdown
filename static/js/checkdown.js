// Generated by CoffeeScript 1.6.3
var Debt, Debts, MyButtons, MyChargeButtons, MyDebt, MyList, MyPaymentButtons, MyUser, RecentDebt, RecentList, User, Users;

User = Backbone.Model.extend({
  initialize: function(o) {
    this.set('username', o.username);
    this.set('email', o.email);
    return this.set('id', o.id);
  },
  defaults: {
    username: 'None',
    email: 'None'
  },
  toString: function() {
    return "[User: " + this.get('username') + "]";
  }
});

Debt = Backbone.Model.extend({
  initialize: function(o, options) {
    var debtor, lender, users;
    users = options.users;
    lender = users.get(o.lender.id);
    debtor = users.get(o.debtor.id);
    this.set('id', o.id);
    this.set('lender', lender);
    this.set('debtor', debtor);
    this.set('amount', o.amount);
    this.set('created', o.created);
    if (o.paid != null) {
      this.set('paid', o.paid);
    }
    if (o.description != null) {
      return this.set('description', o.description);
    }
  },
  defaults: {
    debtor: null,
    lender: null,
    description: 'None',
    created: null,
    paid: false
  },
  toString: function() {
    if (this.get('paid')) {
      return "[Debt: " + this.get('debtor') + " owed " + this.get('lender') + " " + this.get('amount') + "]";
    } else {
      return "[Debt: " + this.get('debtor') + " owes " + this.get('lender') + " " + this.get('amount') + "]";
    }
  }
});

Users = Backbone.Collection.extend({
  url: "users",
  model: User
});

Debts = Backbone.Collection.extend({
  url: "debts",
  model: Debt,
  lenderIs: function(user) {
    return new Debts(this.filter(function(debt) {
      return debt.get('lender').id === user.id;
    }));
  },
  debtorIs: function(user) {
    return new Debts(this.filter(function(debt) {
      return debt.get('debtor').id === user.id;
    }));
  },
  groupByDebtor: function() {
    var debtor, grouped;
    grouped = this.groupBy(function(debt) {
      return debt.get('debtor').get('username');
    });
    for (debtor in grouped) {
      grouped[debtor] = new Debts(grouped[debtor]);
    }
    return grouped;
  },
  groupByLender: function() {
    var grouped, lender;
    grouped = this.groupBy(function(debt) {
      return debt.get('lender').get('username');
    });
    for (lender in grouped) {
      grouped[lender] = new Debts(grouped[lender]);
    }
    return grouped;
  },
  totalAmount: function() {
    return this.reduce((function(x, y) {
      return x + y.get('amount');
    }), 0);
  }
});

/* Views: Recent Debts
*/


RecentList = React.createClass({
  getInitialState: function() {
    var _this = this;
    this.props.debts.on('change add remove', function(e) {
      return _this.setState({
        debts: _this.props.debts
      });
    });
    return {
      debts: this.props.debts
    };
  },
  render: function() {
    var renderedDebts;
    renderedDebts = this.state.debts.map(function(debt) {
      return RecentDebt({
        debt: debt
      });
    });
    return React.DOM.div({
      id: "debtview"
    }, renderedDebts);
  }
});

RecentDebt = React.createClass({
  render: function() {
    var a, amount, debtor, description, div, i, lender, span, _ref;
    debtor = this.props.debt.get('debtor').get('username');
    lender = this.props.debt.get('lender').get('username');
    amount = this.props.debt.get('amount');
    description = this.props.debt.get('description');
    _ref = React.DOM, div = _ref.div, a = _ref.a, i = _ref.i, span = _ref.span;
    return div({
      className: "debt"
    }, div({
      className: "heading"
    }, a({}, debtor), i({
      className: "fa fa-arrow-circle-right"
    }), a({}, lender), span({
      className: "amount"
    }, "$" + amount)), div({
      className: "description"
    }, description));
  }
});

/* Views: My coalesced debts and loans
*/


MyList = React.createClass({
  getInitialState: function() {
    var _this = this;
    this.props.debts.on('change add remove', function(e) {
      return _this.setState({
        debts: _this.props.debts,
        user: _this.props.debts.get(_this.props.userId)
      });
    });
    return {
      user: this.props.debts.get(this.props.userId),
      debts: this.props.debts,
      userIsDebtor: this.props.userIsDebtor
    };
  },
  render: function() {
    var groupedDebts, groupedDebtsArray, key, renderedUsers,
      _this = this;
    if (this.state.userIsDebtor) {
      groupedDebts = this.state.debts.debtorIs(this.state.user).groupByLender();
    } else {
      groupedDebts = this.state.debts.lenderIs(this.state.user).groupByDebtor();
    }
    groupedDebtsArray = (function() {
      var _results;
      _results = [];
      for (key in groupedDebts) {
        _results.push([key, groupedDebts[key]]);
      }
      return _results;
    })();
    renderedUsers = groupedDebtsArray.map(function(group) {
      return MyUser({
        otherUser: group[0],
        debts: group[1],
        userIsDebtor: _this.state.userIsDebtor
      });
    });
    return React.DOM.div({}, renderedUsers);
  }
});

MyUser = React.createClass({
  render: function() {
    var a, div, renderedDebts, text, total, ul, username, _ref,
      _this = this;
    username = this.props.otherUser;
    total = this.props.debts.totalAmount();
    if (this.props.userIsDebtor) {
      text = "You owe ";
    } else {
      text = "You are owed by ";
    }
    renderedDebts = this.props.debts.map(function(debt) {
      return MyDebt({
        debt: debt,
        userIsDebtor: _this.props.userIsDebtor
      });
    });
    _ref = React.DOM, div = _ref.div, a = _ref.a, ul = _ref.ul;
    return div({
      className: "person-debt"
    }, text, a({
      style: {
        'font-weight': 'bold'
      }
    }, username), " a total of $" + total, ul({
      className: "fa-ul debt-details"
    }, renderedDebts), MyButtons({
      total: total,
      userIsDebtor: this.props.userIsDebtor
    }));
  }
});

MyDebt = React.createClass({
  render: function() {
    var amount, date, description, i, li, span, _ref;
    date = "08-22-2012";
    description = this.props.debt.get('description');
    amount = this.props.debt.get('amount');
    _ref = React.DOM, li = _ref.li, i = _ref.i, span = _ref.span;
    return li({}, i({
      className: "fa-li fa fa-arrow-circle-right"
    }), span({
      className: 'date'
    }, date + ': '), span({
      className: 'description'
    }, description), span({
      className: 'badge amount positive'
    }, '$' + amount));
  }
});

MyButtons = React.createClass({
  render: function() {
    var buttons, total;
    total = this.props.total;
    if (this.props.userIsDebtor) {
      buttons = MyPaymentButtons({
        total: total
      });
    } else {
      buttons = MyChargeButtons({
        total: total
      });
    }
    return React.DOM.div({
      className: "btn-group",
      style: {
        width: "100%"
      }
    }, buttons);
  }
});

MyPaymentButtons = React.createClass({
  render: function() {
    var total;
    total = this.props.total;
    return React.DOM.div({
      style: {
        margin: "10px 30%"
      }
    }, React.DOM.button({
      className: "btn btn-success btn-xs"
    }, React.DOM.i({
      className: "fa fa-usd"
    }), "Pay $ " + total), " ", React.DOM.button({
      className: "btn btn-primary btn-xs"
    }, React.DOM.i({
      className: "fa fa-usd"
    }), "Pay Other"));
  }
});

MyChargeButtons = React.createClass({
  render: function() {
    var total;
    total = this.props.total;
    return React.DOM.div({
      style: {
        margin: "10px 30%"
      }
    }, React.DOM.button({
      className: "btn btn-success btn-xs"
    }, React.DOM.i({
      className: "fa fa-usd"
    }), "Charge $ " + total));
  }
});

$(function() {
  var debts, userId, users;
  window.users = users = new Users();
  users.fetch();
  window.debts = debts = new Debts();
  debts.fetch({
    users: users
  });
  userId = 2;
  React.renderComponent(RecentList({
    debts: debts
  }), $('#debtviewholder')[0]);
  React.renderComponent(MyList({
    userId: userId,
    debts: debts,
    userIsDebtor: true
  }), $('#owe')[0]);
  return React.renderComponent(MyList({
    userId: userId,
    debts: debts,
    userIsDebtor: false
  }), $('#owed')[0]);
});
