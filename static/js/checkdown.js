// Generated by CoffeeScript 1.6.3
var Debt, Debts, MyButtons, MyChargeButtons, MyDebt, MyDebtTable, MyList, MyPaymentButtons, MyUser, RecentDebt, RecentList, User, Users;

User = Backbone.Model.extend({
  initialize: function(o) {
    this.set('username', o.username);
    this.set('email', o.email);
    return this.set('id', o.id);
  },
  defaults: {
    username: 'None',
    email: 'None'
  },
  toString: function() {
    return "[User: " + this.get('username') + "]";
  }
});

Debt = Backbone.Model.extend({
  initialize: function(o, options) {
    var debtor, lender, users;
    users = options.users;
    lender = users.get(o.lender.id);
    debtor = users.get(o.debtor.id);
    this.set('id', o.id);
    this.set('lender', lender);
    this.set('debtor', debtor);
    this.set('amount', o.amount);
    this.set('created', o.created);
    if (o.paid != null) {
      this.set('paid', o.paid);
    }
    if (o.description != null) {
      return this.set('description', o.description);
    }
  },
  defaults: {
    debtor: null,
    lender: null,
    description: 'None',
    created: null,
    paid: false
  },
  toString: function() {
    if (this.get('paid')) {
      return "[Debt: " + this.get('debtor') + " owed " + this.get('lender') + " " + this.get('amount') + "]";
    } else {
      return "[Debt: " + this.get('debtor') + " owes " + this.get('lender') + " " + this.get('amount') + "]";
    }
  }
});

Users = Backbone.Collection.extend({
  url: "users",
  model: User
});

Debts = Backbone.Collection.extend({
  url: "debts",
  model: Debt,
  lenderIs: function(user) {
    return new Debts(this.filter(function(debt) {
      return debt.get('lender').id === user.id;
    }));
  },
  debtorIs: function(user) {
    return new Debts(this.filter(function(debt) {
      return debt.get('debtor').id === user.id;
    }));
  },
  between: function(user1, user2) {
    return new Debts(this.filter(function(debt) {
      return debt.get('debtor').id === user1.id && debt.get('lender').id === user2.id || debt.get('debtor').id === user2.id && debt.get('lender').id === user1.id;
    }));
  },
  groupByDebtor: function() {
    var debtor, grouped;
    grouped = this.groupBy(function(debt) {
      return debt.get('debtor').get('username');
    });
    for (debtor in grouped) {
      grouped[debtor] = new Debts(grouped[debtor]);
    }
    return grouped;
  },
  groupByLender: function() {
    var grouped, lender;
    grouped = this.groupBy(function(debt) {
      return debt.get('lender').get('username');
    });
    for (lender in grouped) {
      grouped[lender] = new Debts(grouped[lender]);
    }
    return grouped;
  },
  totalAmount: function() {
    return this.reduce((function(x, y) {
      return x + y.get('amount');
    }), 0);
  }
});

/* Views: Recent Debts
*/


RecentList = React.createClass({
  getInitialState: function() {
    var _this = this;
    this.props.debts.on('change add remove', function(e) {
      return _this.setState({
        debts: _this.props.debts
      });
    });
    return {
      debts: this.props.debts
    };
  },
  render: function() {
    var renderedDebts;
    renderedDebts = this.state.debts.map(function(debt) {
      return RecentDebt({
        debt: debt
      });
    });
    return React.DOM.div({
      id: "debtview"
    }, renderedDebts);
  }
});

RecentDebt = React.createClass({
  render: function() {
    var a, amount, debtor, description, div, i, lender, span, _ref;
    debtor = this.props.debt.get('debtor').get('username');
    lender = this.props.debt.get('lender').get('username');
    amount = this.props.debt.get('amount');
    description = this.props.debt.get('description');
    _ref = React.DOM, div = _ref.div, a = _ref.a, i = _ref.i, span = _ref.span;
    return div({
      className: "debt"
    }, div({
      className: "heading"
    }, a({}, debtor), i({
      className: "fa fa-arrow-circle-right"
    }), a({}, lender), span({
      className: "amount"
    }, "$" + amount)), div({
      className: "description"
    }, description));
  }
});

/* Views: My coalesced debts and loans
*/


MyList = React.createClass({
  getInitialState: function() {
    var _this = this;
    this.props.debts.on('change add remove', function(e) {
      return _this.setState({
        debts: _this.props.debts,
        users: _this.props.users,
        user: _this.props.users.get(_this.props.userId)
      });
    });
    return {
      user: this.props.users.get(this.props.userId),
      debts: this.props.debts,
      users: this.props.users
    };
  },
  render: function() {
    var renderedUsers,
      _this = this;
    renderedUsers = this.state.users.map(function(otherUser) {
      var debts;
      debts = _this.props.debts.between(_this.state.user, otherUser);
      if (debts.length > 0) {
        return MyUser({
          user: _this.state.user,
          otherUser: otherUser,
          debts: debts
        });
      } else {

      }
    });
    return React.DOM.div({}, renderedUsers);
  }
});

MyUser = React.createClass({
  render: function() {
    var a, div, h2, i, total, ul, values, xs, ys, _i, _ref;
    _ref = React.DOM, div = _ref.div, a = _ref.a, ul = _ref.ul, h2 = _ref.h2;
    total = this.props.debts.lenderIs(this.props.user).totalAmount() - this.props.debts.debtorIs(this.props.user).totalAmount();
    xs = [0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60];
    ys = [0, 40, -150, -130, -50, -20, 40, 0, 80, 90, 100];
    values = [];
    for (i = _i = 0; _i <= 10; i = ++_i) {
      values.push({
        x: xs[i],
        y: ys[i]
      });
    }
    return div({
      className: "person-debt"
    }, h2({}, this.props.otherUser.get('username')), div({
      className: "graph"
    }, LineGraph({
      normaliseYAxis: true,
      autoResize: true,
      valueLists: [values]
    })), MyDebtTable({
      debts: this.props.debts,
      user: this.props.user
    }), MyButtons({
      total: total
    }));
  }
});

MyDebtTable = React.createClass({
  render: function() {
    var cumulative, debtLines, table, tbody, td, th, thead, tr, _ref,
      _this = this;
    _ref = React.DOM, table = _ref.table, thead = _ref.thead, tr = _ref.tr, th = _ref.th, td = _ref.td, tbody = _ref.tbody;
    cumulative = 0;
    debtLines = this.props.debts.map(function(debt) {
      var isDebt;
      isDebt = debt.get('debtor').id === _this.props.user.id;
      if (isDebt) {
        cumulative -= debt.get('amount');
      } else {
        cumulative += debt.get('amount');
      }
      return MyDebt({
        debt: debt,
        isDebt: isDebt,
        cumulative: cumulative
      });
    });
    return table({
      className: "medium-12 columns"
    }, thead({}, tr({}, th({
      width: 100
    }, "Date"), th({}, "Description"), th({
      width: 80
    }, "Amount"), th({
      className: "show-for-medium-up",
      width: 80
    }, "Culmulative"))), tbody({}, debtLines));
  }
});

MyDebt = React.createClass({
  render: function() {
    var amount, cumulative, date, description, td, tr, type, _ref;
    date = "08-22-2012";
    description = this.props.debt.get('description');
    amount = this.props.debt.get('amount');
    cumulative = this.props.cumulative;
    type = this.props.isDebt ? 'debt' : 'loan';
    _ref = React.DOM, tr = _ref.tr, td = _ref.td;
    return tr({
      className: type
    }, td({}, date), td({}, description), td({}, '$' + amount), td({
      className: "show-for-medium-up"
    }, '$' + cumulative));
  }
});

MyButtons = React.createClass({
  render: function() {
    var buttons, total;
    total = this.props.total;
    if (total < 0) {
      buttons = MyPaymentButtons({
        total: total
      });
    } else {
      buttons = MyChargeButtons({
        total: total
      });
    }
    return React.DOM.div({
      className: "text-center",
      style: {
        width: "100%"
      }
    }, buttons);
  }
});

MyPaymentButtons = React.createClass({
  render: function() {
    var total;
    total = Math.abs(this.props.total);
    return React.DOM.div({}, React.DOM.button({
      className: "button tiny radius"
    }, "Pay $" + total), " ", React.DOM.button({
      className: "button tiny radius success"
    }, "Pay Other"));
  }
});

MyChargeButtons = React.createClass({
  render: function() {
    var total;
    total = Math.abs(this.props.total);
    return React.DOM.div({}, React.DOM.button({
      className: "button tiny radius"
    }, "Charge $" + total));
  }
});

$(function() {
  var debts, userId, users;
  window.users = users = new Users();
  users.fetch();
  window.debts = debts = new Debts();
  debts.fetch({
    users: users
  });
  userId = 2;
  React.renderComponent(RecentList({
    debts: debts
  }), $('#debtviewholder')[0]);
  return React.renderComponent(MyList({
    userId: userId,
    debts: debts,
    users: users
  }), $('#owe')[0]);
});
