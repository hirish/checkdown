// Generated by CoffeeScript 1.6.3
(function() {
  var Debt, DebtView, Debts, MyOwedView, User, Users, createDebtFromJSON, createUserFromJSON, debts, getDebts, getUsers, users;

  User = Backbone.Model.extend({
    defaults: {
      username: 'None',
      email: 'None'
    },
    toString: function() {
      return "[User: " + this.get('username') + "]";
    }
  });

  Debt = Backbone.Model.extend({
    defaults: {
      debtor: null,
      lender: null,
      description: 'None',
      created: null,
      paid: false
    },
    toString: function() {
      if (this.get('paid')) {
        return "[Debt: " + this.get('debtor') + " owed " + this.get('lender') + " " + this.get('amount') + "]";
      } else {
        return "[Debt: " + this.get('debtor') + " owes " + this.get('lender') + " " + this.get('amount') + "]";
      }
    }
  });

  Users = Backbone.Collection.extend({
    model: Users
  });

  Debts = Backbone.Collection.extend({
    model: Debt,
    lenderIs: function(user) {
      return new Debts(this.filter(function(debt) {
        return debt.get('lender').id === user.id;
      }));
    },
    debtorIs: function(user) {
      return new Debts(this.filter(function(debt) {
        return debt.get('debtor').id === user.id;
      }));
    },
    groupByDebtor: function() {
      var debtor, grouped;
      grouped = this.groupBy(function(debt) {
        return debt.get('debtor').get('username');
      });
      for (debtor in grouped) {
        grouped[debtor] = new Debts(grouped[debtor]);
      }
      return grouped;
    },
    groupByLender: function() {
      var grouped, lender;
      grouped = this.groupBy(function(debt) {
        return debt.get('lender').get('username');
      });
      for (lender in grouped) {
        grouped[lender] = new Debts(grouped[lender]);
      }
      return grouped;
    }
  });

  getUsers = function() {
    var response, userJSON, users;
    response = $.ajax('/users', {
      async: false
    });
    users = (jQuery.parseJSON(response.responseText)).users;
    return new Users((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        userJSON = users[_i];
        _results.push(createUserFromJSON(userJSON));
      }
      return _results;
    })());
  };

  createUserFromJSON = function(json) {
    return new User({
      id: json.id,
      username: json.username,
      email: json.email
    });
  };

  users = getUsers();

  getDebts = function() {
    var debtJSON, debts, response;
    response = $.ajax('/debts', {
      async: false
    });
    debts = (jQuery.parseJSON(response.responseText)).debts;
    return new Debts((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = debts.length; _i < _len; _i++) {
        debtJSON = debts[_i];
        _results.push(createDebtFromJSON(debtJSON));
      }
      return _results;
    })());
  };

  createDebtFromJSON = function(json) {
    var debtor, lender;
    debtor = users.get(json.debtor.id);
    lender = users.get(json.lender.id);
    return new Debt({
      id: json.id,
      debtor: debtor,
      lender: lender,
      description: json.description,
      created: json.created,
      paid: json.paid,
      amount: json.amount
    });
  };

  debts = getDebts();

  DebtView = Backbone.View.extend({
    initialize: function() {
      return this.render();
    },
    render: function() {
      var debt, template, _i, _len, _ref;
      template = '';
      _ref = this.collection.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        debt = _ref[_i];
        template += _.template($('#debtor').html(), {
          debt: debt
        });
      }
      return this.$el.html(template);
    }
  });

  MyOwedView = Backbone.View.extend({
    initialize: function(args) {
      this.user = args.user;
      return this.render();
    },
    render: function() {
      var groupedDebts, lenderDebts, template;
      groupedDebts = this.collection.debtorIs(this.user).groupByLender();
      template = '';
      for (lenderDebts in groupedDebts) {
        template += _.template($('#myowed').html(), {});
      }
      return this.$el.html(template);
    }
  });

  $(function() {
    var owe, owed, user;
    window.debts = debts = getDebts();
    window.users = users = getUsers();
    window.user = user = users.models[1];
    window.s = new DebtView({
      el: $('#debtview'),
      collection: debts,
      penis: 'penis'
    });
    window.t = new MyOwedView({
      el: $('#owe'),
      collection: debts,
      user: user
    });
    window.owe = owe = debts.debtorIs(user);
    return window.owed = owed = debts.lenderIs(user);
  });

}).call(this);
