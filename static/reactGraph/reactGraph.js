// Generated by CoffeeScript 1.6.3
var LineGraph, getXs, getYs, max, min;

getXs = function(values) {
  return values.map(function(value) {
    return value.x;
  });
};

getYs = function(values) {
  return values.map(function(value) {
    return value.y;
  });
};

min = function(values) {
  return values.reduce((function(s, v) {
    if (v > s) {
      return s;
    } else {
      return v;
    }
  }));
};

max = function(values) {
  return values.reduce((function(s, v) {
    if (v < s) {
      return s;
    } else {
      return v;
    }
  }));
};

LineGraph = React.createClass({
  getInitialState: function() {
    return {
      valueLists: [],
      minX: 0,
      maxX: 100,
      minY: -100,
      maxY: 100,
      dimY: 200,
      dimX: 600,
      pointRadius: 4,
      leftOffset: 7,
      margin: 10
    };
  },
  componentDidMount: function(node) {
    var dimX, dimY, maxX, maxY, minX, minY, parentX, parentY, yAxisSize,
      _this = this;
    parentX = $(node).parent().width();
    parentY = $(node).parent().height();
    dimX = this.props.width ? this.props.width : this.props.autoResize ? parentX : this.state.dimX;
    dimY = this.props.height ? this.props.height : this.props.autoResize ? parentY : this.state.dimY;
    if (this.props.autoResize) {
      $(window).resize(function() {
        return _this.setState({
          dimX: $(node).parent().width()
        });
      });
    }
    minX = min(this.props.valueLists.map(function(valueList) {
      return min(getXs(valueList));
    }));
    maxX = max(this.props.valueLists.map(function(valueList) {
      return max(getXs(valueList));
    }));
    minY = min(this.props.valueLists.map(function(valueList) {
      return min(getYs(valueList));
    }));
    maxY = max(this.props.valueLists.map(function(valueList) {
      return max(getYs(valueList));
    }));
    if (this.props.normaliseYAxis) {
      yAxisSize = Math.max(Math.abs(minY), Math.abs(maxY));
      maxY = yAxisSize;
      minY = -yAxisSize;
    }
    return this.setState({
      minX: minX,
      maxX: maxX,
      minY: minY,
      maxY: maxY,
      dimX: dimX,
      dimY: dimY,
      valueLists: this.props.valueLists
    });
  },
  render: function() {
    var axis, negativeFills, negativePaths, negativePoints, positiveFills, positivePaths, positivePoints,
      _this = this;
    positivePoints = this.props.valueLists.map(function(values) {
      return React.DOM.g({
        className: "fill colour1 positive"
      }, _this.generatePoints(values));
    });
    negativePoints = this.props.valueLists.map(function(values) {
      return React.DOM.g({
        className: "fill colour2 negative"
      }, _this.generatePoints(values));
    });
    positivePaths = this.props.valueLists.map(function(values) {
      return React.DOM.path({
        className: "colour1 positive",
        d: _this.generatePath(values)
      });
    });
    negativePaths = this.props.valueLists.map(function(values) {
      return React.DOM.path({
        className: "colour2 negative",
        d: _this.generatePath(values)
      });
    });
    positiveFills = this.props.valueLists.map(function(values) {
      return React.DOM.path({
        className: "fill colour1 positive",
        d: _this.positiveFill(values)
      });
    });
    negativeFills = this.props.valueLists.map(function(values) {
      return React.DOM.path({
        className: "fill colour2 negative",
        d: _this.positiveFill(values)
      });
    });
    axis = React.DOM.path({
      className: "axis",
      d: "M 5 0 V 200 M 0 100 H 625"
    });
    axis = React.DOM.path({
      className: "axis",
      d: this.axisPath()
    });
    return React.DOM.svg({
      className: "reactGraph",
      width: this.state.dimX,
      height: this.state.dimY
    }, React.DOM.clippath({
      id: "positive"
    }, React.DOM.rect({
      x: 0,
      y: 0,
      width: this.state.dimX,
      height: this.y(0)
    })), React.DOM.clippath({
      id: "negative"
    }, React.DOM.rect({
      x: 0,
      y: this.y(0),
      width: this.state.dimX,
      height: this.y(0)
    })), positiveFills, negativeFills, positivePaths, negativePaths, axis, positivePoints, negativePoints);
  },
  axisPath: function() {
    var path;
    path = "M " + (this.state.leftOffset + this.state.margin) + " " + this.state.margin;
    path += "V " + (this.state.dimY - this.state.margin);
    path += "M " + this.state.margin + " " + (this.y(0));
    return path += "H " + (this.state.dimX - this.state.margin);
  },
  generatePath: function(values) {
    var sections,
      _this = this;
    sections = values.map(function(value) {
      return "L " + (_this.x(value.x)) + " " + (_this.y(value.y));
    });
    return sections.reduce((function(y, section) {
      return y + " " + section;
    }), "M " + (this.x(0)) + " " + (this.y(0)) + " ");
  },
  positiveFill: function(values) {
    var connectedPath, path;
    path = this.generatePath(values);
    return connectedPath = path + (" V " + (this.y(0)) + " H " + (this.x(0)));
  },
  generatePoints: function(values) {
    var _this = this;
    return values.map(function(value) {
      return React.DOM.circle({
        cx: _this.x(value.x),
        cy: _this.y(value.y),
        r: _this.state.pointRadius
      });
    });
  },
  x: function(valueX) {
    var normed, position, xLen;
    xLen = this.state.dimX - (2 * this.state.margin) - this.state.leftOffset;
    normed = valueX - this.state.minX;
    position = parseInt(xLen * normed / (this.state.maxX - this.state.minX));
    return position + this.state.leftOffset + this.state.margin;
  },
  y: function(valueY) {
    var normed, position, yLen;
    yLen = this.state.dimY - (2 * this.state.margin);
    normed = valueY - this.state.minY;
    position = parseInt(yLen * normed / (this.state.maxY - this.state.minY));
    return this.state.margin + yLen - position;
  }
});
