// Generated by CoffeeScript 1.6.3
var LineGraph;

LineGraph = React.createClass({
  getInitialState: function() {
    return {
      valueLists: this.props.valueLists,
      yMin: -200,
      yMax: 200,
      y: 200
    };
  },
  render: function() {
    var axis, negativeFills, negativePaths, negativePoints, positiveFills, positivePaths, positivePoints,
      _this = this;
    positivePoints = this.props.valueLists.map(function(values) {
      return React.DOM.g({
        className: "fill_colour1 positive"
      }, _this.generatePoints(values));
    });
    negativePoints = this.props.valueLists.map(function(values) {
      return React.DOM.g({
        className: "fill_colour2 negative"
      }, _this.generatePoints(values));
    });
    positivePaths = this.props.valueLists.map(function(values) {
      return React.DOM.path({
        className: "colour1 positive",
        d: _this.generatePath(values)
      });
    });
    negativePaths = this.props.valueLists.map(function(values) {
      return React.DOM.path({
        className: "colour2 negative",
        d: _this.generatePath(values)
      });
    });
    positiveFills = this.props.valueLists.map(function(values) {
      return React.DOM.path({
        className: "fill_colour1 positive",
        d: _this.positiveFill(values)
      });
    });
    negativeFills = this.props.valueLists.map(function(values) {
      return React.DOM.path({
        className: "fill_colour2 negative",
        d: _this.positiveFill(values)
      });
    });
    axis = React.DOM.path({
      className: "axis",
      d: "M 5 0 V 200 M 0 100 H 625"
    });
    return React.DOM.svg({
      className: "reactGraph",
      width: 700,
      height: 210
    }, positiveFills, negativeFills, positivePaths, negativePaths, axis, positivePoints, negativePoints);
  },
  generatePath: function(values) {
    var sections,
      _this = this;
    sections = values.map(function(value) {
      return "L " + (_this.x(value.x)) + " " + (_this.y(value.y));
    });
    return sections.reduce((function(y, section) {
      return y + " " + section;
    }), "M 5 100 ");
  },
  positiveFill: function(values) {
    var connectedPath, path;
    path = this.generatePath(values);
    return connectedPath = path + " V 100 H 5";
  },
  generatePoints: function(values) {
    var _this = this;
    return values.map(function(value) {
      return React.DOM.circle({
        cx: _this.x(value.x),
        cy: _this.y(value.y),
        r: 3
      });
    });
  },
  x: function(valueX) {
    return valueX + 5;
  },
  y: function(valueY) {
    var normed, position;
    normed = valueY - this.state.yMin;
    position = parseInt(this.state.y * normed / (this.state.yMax - this.state.yMin));
    return this.state.y - position;
  }
});

$(function() {
  var i, values, xs, ys, _i;
  console.log("Hello World");
  xs = [0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60];
  ys = [0, 40, -150, -130, -50, -20, 40, 50, 80, 90, 100];
  values = [];
  for (i = _i = 0; _i <= 10; i = ++_i) {
    values.push({
      x: 10 * xs[i],
      y: ys[i]
    });
  }
  window.v = values;
  return React.renderComponent(LineGraph({
    valueLists: [values]
  }), $('#other')[0]);
});
